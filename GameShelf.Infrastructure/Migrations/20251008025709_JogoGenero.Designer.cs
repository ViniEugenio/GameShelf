// <auto-generated />
using System;
using GameShelf.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameShelf.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251008025709_JogoGenero")]
    partial class JogoGenero
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameShelf.Domain.Entities.Analise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<decimal>("Classificacao")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("JogoPrateleiraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JogoPrateleiraId");

                    b.HasIndex("UserId");

                    b.ToTable("Analise");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnaliseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnaliseId");

                    b.HasIndex("UserId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Genero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Genero");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Jogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Jogo");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoGenero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JogoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GeneroId");

                    b.HasIndex("JogoId");

                    b.ToTable("JogoGenero");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoPlataforma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("JogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlataformaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JogoId");

                    b.HasIndex("PlataformaId");

                    b.ToTable("JogoPlataforma");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoPrateleira", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("JogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrateleiraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JogoId");

                    b.HasIndex("PrateleiraId");

                    b.HasIndex("UserId");

                    b.ToTable("JogoPrateleira");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.ParticipantePrateleira", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("PrateleiraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrateleiraId");

                    b.HasIndex("UserId");

                    b.ToTable("ParticipantePrateleira");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Plataforma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Plataforma");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Prateleira", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Prateleira");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DataAtivacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Analise", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.JogoPrateleira", "JogoPrateleira")
                        .WithMany("AnalisesRecebidas")
                        .HasForeignKey("JogoPrateleiraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.User", "User")
                        .WithMany("AnalisesFeitas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JogoPrateleira");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Comentario", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.Analise", "Analise")
                        .WithMany("ComentariosRecebidos")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.User", "User")
                        .WithMany("ComentariosFeitos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Analise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoGenero", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.Genero", "Genero")
                        .WithMany("Jogos")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.Jogo", "Jogo")
                        .WithMany("Generos")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Jogo");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoPlataforma", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.Jogo", "Jogo")
                        .WithMany("Plataformas")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.Plataforma", "Plataforma")
                        .WithMany("Jogos")
                        .HasForeignKey("PlataformaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogo");

                    b.Navigation("Plataforma");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoPrateleira", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.Jogo", "Jogo")
                        .WithMany("Prateleiras")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.Prateleira", "Prateleira")
                        .WithMany("Jogos")
                        .HasForeignKey("PrateleiraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.User", "User")
                        .WithMany("JogosInseridosEmPrateleiras")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogo");

                    b.Navigation("Prateleira");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.ParticipantePrateleira", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.Prateleira", "Prateleira")
                        .WithMany("Participantes")
                        .HasForeignKey("PrateleiraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.User", "User")
                        .WithMany("PrateleirasParticipante")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prateleira");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Prateleira", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.User", "User")
                        .WithMany("MinhasPrateleiras")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameShelf.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameShelf.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Analise", b =>
                {
                    b.Navigation("ComentariosRecebidos");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Genero", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Jogo", b =>
                {
                    b.Navigation("Generos");

                    b.Navigation("Plataformas");

                    b.Navigation("Prateleiras");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.JogoPrateleira", b =>
                {
                    b.Navigation("AnalisesRecebidas");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Plataforma", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.Prateleira", b =>
                {
                    b.Navigation("Jogos");

                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("GameShelf.Domain.Entities.User", b =>
                {
                    b.Navigation("AnalisesFeitas");

                    b.Navigation("ComentariosFeitos");

                    b.Navigation("JogosInseridosEmPrateleiras");

                    b.Navigation("MinhasPrateleiras");

                    b.Navigation("PrateleirasParticipante");
                });
#pragma warning restore 612, 618
        }
    }
}
